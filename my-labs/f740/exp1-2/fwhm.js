let raw = '0	16768022;1	5463916;2	4189645;3	12015;4	10171;5	9892;6	10321;7	10521;8	11698;9	13210;10	14709;11	18473;12	24115;13	29484;14	33734;15	33375;16	29605;17	30305;18	31229;19	26698;20	26945;21	13600;22	6143;23	5010;24	5031;25	5167;26	6150;27	73077;28	123364;29	12189;30	6325;31	6307;32	6528;33	6775;34	6621;35	6673;36	6433;37	6073;38	6050;39	5514;40	5266;41	5092;42	4818;43	4760;44	4519;45	4437;46	4330;47	4361;48	4318;49	4290;50	4362;51	4294;52	4333;53	4320;54	4381;55	4277;56	4303;57	4295;58	4439;59	4337;60	4488;61	4411;62	4362;63	4452;64	4495;65	4390;66	4433;67	4567;68	4513;69	4514;70	4502;71	4574;72	4580;73	4715;74	4612;75	4765;76	4761;77	4926;78	4956;79	5121;80	5397;81	5361;82	5561;83	5609;84	5791;85	5821;86	6095;87	6081;88	5939;89	6204;90	6320;91	6353;92	6373;93	6325;94	6361;95	6255;96	6218;97	6279;98	6321;99	6078;100	6075;101	5925;102	6069;103	5850;104	5768;105	5801;106	5621;107	5632;108	5550;109	5553;110	5416;111	5419;112	5367;113	5324;114	5248;115	5247;116	4977;117	5028;118	4963;119	4897;120	4763;121	4819;122	4712;123	4720;124	4689;125	4575;126	4589;127	4489;128	4522;129	4433;130	4307;131	4401;132	4389;133	4222;134	4199;135	4206;136	4326;137	4176;138	4168;139	4226;140	4044;141	4095;142	3987;143	4041;144	3985;145	3903;146	3959;147	3907;148	3886;149	3799;150	3739;151	3768;152	3769;153	3742;154	3613;155	3568;156	3575;157	3506;158	3480;159	3496;160	3399;161	3486;162	3380;163	3354;164	3365;165	3279;166	3371;167	3327;168	3368;169	3300;170	3347;171	3209;172	3302;173	3181;174	3201;175	3274;176	3135;177	3252;178	3225;179	3107;180	3233;181	3133;182	3190;183	3299;184	3142;185	3276;186	3190;187	3218;188	3331;189	3265;190	3288;191	3424;192	3382;193	3372;194	3363;195	3398;196	3321;197	3442;198	3405;199	3435;200	3592;201	3645;202	3601;203	3653;204	3645;205	3605;206	3686;207	3674;208	3673;209	3717;210	3659;211	3856;212	3730;213	3768;214	3824;215	3806;216	3714;217	3715;218	3859;219	3854;220	3779;221	3762;222	3858;223	3766;224	3554;225	3659;226	3557;227	3612;228	3481;229	3276;230	3361;231	3243;232	3005;233	3006;234	2761;235	2717;236	2710;237	2444;238	2369;239	2293;240	2155;241	2156;242	2052;243	1862;244	1773;245	1764;246	1706;247	1718;248	1719;249	1665;250	1655;251	1698;252	1697;253	1711;254	1791;255	1917;256	1989;257	2040;258	2168;259	2367;260	2513;261	2760;262	2764;263	2966;264	3207;265	3446;266	3591;267	3847;268	4162;269	4343;270	4571;271	4835;272	5132;273	5483;274	5669;275	5999;276	6317;277	6525;278	6818;279	7327;280	7530;281	7827;282	8137;283	8342;284	8475;285	8671;286	8786;287	8917;288	9258;289	9158;290	9111;291	9224;292	9332;293	9012;294	9014;295	8790;296	8683;297	8361;298	8053;299	7923;300	7589;301	7295;302	6978;303	6629;304	6130;305	5768;306	5295;307	5033;308	4717;309	4295;310	3829;311	3564;312	3349;313	2949;314	2656;315	2357;316	2081;317	1861;318	1752;319	1465;320	1269;321	1207;322	1030;323	889;324	759;325	746;326	602;327	571;328	527;329	504;330	432;331	378;332	371;333	332;334	323;335	284;336	290;337	296;338	288;339	261;340	243;341	225;342	256;343	231;344	234;345	257;346	245;347	218;348	214;349	235;350	224;351	230;352	242;353	201;354	209;355	229;356	234;357	220;358	216;359	214;360	232;361	205;362	216;363	220;364	204;365	224;366	197;367	229;368	227;369	215;370	241;371	195;372	232;373	215;374	199;375	191;376	214;377	221;378	219;379	209;380	216;381	206;382	202;383	207;384	188;385	211;386	193;387	194;388	205;389	221;390	203;391	198;392	217;393	201;394	193;395	225;396	207;397	203;398	206;399	190;400	222;401	204;402	187;403	199;404	192;405	205;406	190;407	194;408	198;409	224;410	212;411	220;412	200;413	218;414	197;415	177;416	188;417	200;418	206;419	191;420	189;421	233;422	212;423	187;424	190;425	166;426	192;427	187;428	186;429	171;430	154;431	201;432	214;433	192;434	185;435	195;436	158;437	163;438	201;439	181;440	168;441	164;442	175;443	169;444	153;445	161;446	181;447	171;448	156;449	156;450	163;451	154;452	173;453	150;454	148;455	153;456	144;457	144;458	133;459	138;460	156;461	126;462	120;463	123;464	108;465	112;466	142;467	131;468	135;469	130;470	124;471	119;472	99;473	102;474	96;475	115;476	125;477	106;478	107;479	105;480	124;481	120;482	108;483	116;484	109;485	127;486	111;487	115;488	113;489	121;490	111;491	105;492	106;493	106;494	111;495	127;496	144;497	115;498	130;499	136;500	122;501	145;502	146;503	138;504	154;505	174;506	155;507	181;508	180;509	173;510	173;511	161;512	180;513	165;514	178;515	200;516	164;517	200;518	176;519	205;520	212;521	202;522	197;523	183;524	222;525	188;526	208;527	207;528	212;529	232;530	213;531	210;532	236;533	251;534	244;535	233;536	247;537	229;538	262;539	225;540	290;541	211;542	223;543	243;544	255;545	212;546	238;547	254;548	207;549	219;550	228;551	223;552	219;553	201;554	197;555	190;556	219;557	189;558	184;559	187;560	177;561	172;562	164;563	177;564	173;565	154;566	141;567	161;568	143;569	132;570	102;571	103;572	119;573	101;574	92;575	89;576	78;577	89;578	68;579	76;580	79;581	66;582	59;583	52;584	59;585	63;586	54;587	43;588	46;589	36;590	40;591	34;592	15;593	34;594	33;595	21;596	29;597	26;598	26;599	20;600	20;601	27;602	19;603	18;604	22;605	20;606	23;607	17;608	16;609	20;610	13;611	16;612	10;613	18;614	18;615	16;616	18;617	10;618	7;619	10;620	15;621	13;622	15;623	22;624	14;625	11;626	18;627	8;628	4;629	5;630	10;631	13;632	14;633	11;634	13;635	15;636	12;637	10;638	11;639	12;640	10;641	14;642	15;643	19;644	15;645	6;646	11;647	9;648	11;649	8;650	4;651	3;652	10;653	11;654	9;655	8;656	8;657	8;658	13;659	13;660	9;661	14;662	12;663	7;664	11;665	7;666	6;667	7;668	6;669	6;670	9;671	12;672	6;673	7;674	5;675	5;676	8;677	7;678	4;679	4;680	6;681	7;682	14;683	7;684	11;685	11;686	4;687	3;688	4;689	2;690	8;691	10;692	3;693	3;694	3;695	4;696	8;697	7;698	2;699	8;700	10;701	4;702	12;703	9;704	4;705	4;706	6;707	8;708	3;709	6;710	6;711	6;712	3;713	9;714	11;715	5;716	7;717	8;718	4;719	10;720	11;721	10;722	8;723	3;724	8;725	8;726	7;727	10;728	10;729	7;730	1;731	5;732	9;733	5;734	2;735	2;736	1;737	6;738	7;739	7;740	7;741	8;742	7;743	5;744	7;745	5;746	3;747	6;748	8;749	3;750	3;751	8;752	3;753	5;754	2;755	2;756	10;757	8;758	4;759	3;760	2;761	5;762	6;763	9;764	8;765	8;766	6;767	6;768	5;769	6;770	2;771	8;772	6;773	3;774	4;775	5;776	7;777	2;778	5;779	8;780	1;781	5;782	4;783	4;784	2;785	4;786	3;787	3;788	2;789	1;790	4;791	2;792	2;793	6;794	4;795	2;796	6;797	3;798	3;799	3;800	3;801	3;802	0;803	2;804	5;805	2;806	2;807	1;808	2;809	0;810	1;811	1;812	1;813	0;814	2;815	1;816	2;817	4;818	2;819	1;820	2;821	2;822	0;823	1;824	3;825	1;826	3;827	2;828	3;829	3;830	5;831	3;832	3;833	2;834	1;835	4;836	0;837	2;838	4;839	1;840	0;841	1;842	5;843	2;844	1;845	1;846	2;847	1;848	1;849	3;850	3;851	1;852	3;853	2;854	3;855	0;856	3;857	0;858	4;859	3;860	3;861	0;862	2;863	4;864	2;865	4;866	3;867	2;868	0;869	2;870	1;871	3;872	1;873	0;874	2;875	2;876	2;877	4;878	1;879	3;880	1;881	3;882	1;883	1;884	0;885	0;886	2;887	1;888	0;889	0;890	3;891	1;892	1;893	4;894	0;895	2;896	2;897	2;898	2;899	4;900	2;901	1;902	0;903	0;904	1;905	1;906	1;907	3;908	1;909	2;910	1;911	0;912	1;913	1;914	4;915	0;916	0;917	1;918	0;919	0;920	1;921	3;922	2;923	1;924	1;925	0;926	4;927	2;928	2;929	0;930	3;931	0;932	0;933	1;934	0;935	1;936	3;937	0;938	1;939	0;940	0;941	1;942	0;943	0;944	2;945	0;946	1;947	0;948	1;949	0;950	0;951	0;952	3;953	0;954	1;955	1;956	1;957	0;958	3;959	0;960	2;961	2;962	0;963	2;964	1;965	1;966	1;967	1;968	1;969	0;970	0;971	1;972	0;973	3;974	0;975	0;976	0;977	0;978	1;979	1;980	0;981	3;982	1;983	2;984	3;985	0;986	1;987	0;988	0;989	1;990	1;991	1;992	0;993	4;994	0;995	0;996	0;997	2;998	0;999	0;1000	0;1001	1;1002	1;1003	1;1004	2;1005	1;1006	4;1007	2;1008	0;1009	4;1010	0;1011	1;1012	1;1013	2;1014	1;1015	0;1016	0;1017	1;1018	0;1019	0;1020	0;1021	1;1022	2;1023	2';
let data = raw.split(';').map(el => parseInt(el.split('\t')[1]));
// let P = 0.095, START = 200;
let P = 0.095, START = 450;

const linear = require('linear-solve');
/*
 * Achar f tal que
 * f(255) = 511
 * f(544) = 1274.5
 * f(x) = ax + b
 * 255a + b = 511
 * 544a + b = 1274.5
 */
let [a, b] = linear.solve([[255, 1], [544, 1]], [511, 1274.5]);
let f = x => a*x + b;

let max = data.slice(START).reduce((a, b) => Math.max(a, b));
let maxIdx = data.indexOf(max);

let prev = max, i;
for (i = maxIdx - 5; i > 0; i--) {
	if (data[i] - prev > P*data[i]) {
		break;
	}
	prev = data[i];
}
let before = i;

prev = max;
for (i = maxIdx + 5; i < data.length; i++) {
	if (data[i] - prev > P*data[i]) {
		break;
	}
	prev = data[i];
}
let after = i;

let bottom = (data[before] + data[after])/2;

let fullHeight = max - bottom;
let halfHeight = fullHeight / 2;
let absoluteFullHeight = bottom + halfHeight;

let diff = v => Math.abs(absoluteFullHeight - v);
let closest = (curr, _, next) => diff(data[next]) < diff(data[curr]) ? next : curr;
let hil = before + data.slice(before, maxIdx).reduce(closest, 0);
let hir = maxIdx + data.slice(maxIdx, after).reduce(closest, 0);

const error = x => f(x + .5) - f(x - .5); // precisão de 1 escala
let sq = x => x * x;

let fwhmEnergy = f(hir) - f(hil);
let delta_fwhmEnergy = Math.sqrt(sq(error(hir)) + sq(error(hil)));
let maxEenergy = f(maxIdx);

console.log('max : ' + maxEenergy + ' \pm ' + error(maxEenergy) + ' keV; fwhm : ' + fwhmEnergy + ' \pm ' + delta_fwhmEnergy + ' keV');

const { EnvBuilder } = require('labs');
const builder = new EnvBuilder();

builder.variableObj({ name : 'E', unit: 'eV' });
builder.variableObj({ name : 'dE', latexName: '\\Delta E', unit: 'eV' });

builder.variableObj({ name : 'y', latexName: '\\bigg( \\frac{\\Delta E}{E} \\bigg)^2', unit: '', formula: '(dE/E)^2' });
builder.variableObj({ name : 'x', latexName: '\\frac{1}{E}', unit: '1/eV', formula: '1/E' });

let e = builder.build();

e.add('E', [ 608.7491349, 724.9913495, 512.13424, 1274.51 ], 2.641868512, 'k');
e.add('dE', [ 11.491, 15.85121107, 7.621, 35.039 ], 0.373616628, 'k');

console.log(e.fullLatexTable(['E', 'dE', 'y', 'x'], 'Valores Resolução', 'resolution'));
e.plot(['x', 'y'], 'results', 'Valores de $\\bigg( \\frac{\\Delta E}{E} \\bigg)^2$ por $\\frac{1}{E}$', 'resolution');